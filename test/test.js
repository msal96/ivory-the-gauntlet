var assert = require('assert')
var LinkedList = require('../index')

describe('Linked List', () => {
  it('Should add to head', () => {
    const list = new LinkedList()
    list.addToHead(1)
    const arr = [list]
    console.log(list.tail)
    list.addToHead(2)
    console.log(list)
    list.addToHead(3)
    console.log('Two Next:', list.tail.next.next)
    assert.equal(list.tail.prev, null)
    assert.equal(list.tail.value, 1)
    assert.equal(list.tail.next.value, 2)
    assert.equal(list.head.prev.value, 2)
    assert.equal(list.head.value, 3)
    assert.equal(list.head.next, null)
    assert.equal(list.head.prev.prev.value, 1)
    assert.equal(list.tail.next.next.value, 3)
  })

  it('Should add to tail', () => {
    const list = new LinkedList()
    list.addToTail(1)
    list.addToTail(2)
    list.addToTail(3)
    assert.equal(list.tail.prev, null)
    assert.equal(list.tail.value, 3)
    assert.equal(list.tail.next.value, 2)
    assert.equal(list.head.prev.value, 2)
    assert.equal(list.head.value, 1)
    assert.equal(list.head.next, null)
    assert.equal(list.head.prev.prev.value, 3)
    assert.equal(list.tail.next.next.value, 1)
  })

  it('Should remove head', () => {
    const list = new LinkedList()
    list.addToHead(1)
    list.addToHead(2)
    list.addToHead(3)
    assert.equal(list.removeHead(), 3)
    assert.equal(list.head.value, 2)
    assert.equal(list.tail.value, 1)
    assert.equal(list.tail.next.value, 2)
    assert.equal(list.head.prev.value, 1)
    assert.equal(list.head.next, null)
    assert.equal(list.removeHead(), 2)
    assert.equal(list.head.value, 1)
    assert.equal(list.tail.value, 1)
    assert.equal(list.tail.next, null)
    assert.equal(list.head.prev, null)
    assert.equal(list.head.next, null)
    assert.equal(list.removeHead(), 1)
    assert.equal(list.head, null)
    assert.equal(list.tail, null)
  })

  it('Should remove tail', () => {
    const list = new LinkedList()
    list.addToTail(1)
    list.addToTail(2)
    list.addToTail(3)
    assert.equal(list.removeTail(), 3)
    assert.equal(list.head.value, 1)
    assert.equal(list.tail.value, 2)
    assert.equal(list.tail.next.value, 1)
    assert.equal(list.head.prev.value, 2)
    assert.equal(list.tail.prev, null)
    assert.equal(list.removeTail(), 2)
    assert.equal(list.head.value, 1)
    assert.equal(list.tail.value, 1)
    assert.equal(list.tail.next, null)
    assert.equal(list.head.prev, null)
    assert.equal(list.tail.prev, null)
    assert.equal(list.removeTail(), 1)
    assert.equal(list.head, null)
    assert.equal(list.tail, null)
  })
  it('Should search for value', () => {
    const list = new LinkedList()
    list.addToHead(1)
    list.addToHead(2)
    list.addToHead(3)
    assert.equal(list.search(1), 1)
    assert.equal(list.search(2), 2)
    assert.equal(list.search(3), 3)
    assert.equal(list.search(4), null)
  })
  it('Should search for indexes of value', () => {
    const list = new LinkedList()
    list.addToTail(1)
    list.addToTail(2)
    list.addToTail(3)
    list.addToTail(3)
    list.addToTail(1)
    assert.deepEqual(list.indexOf(1), [0, 4])
    assert.deepEqual(list.indexOf(2), [3])
    assert.deepEqual(list.indexOf(3), [1, 2])
    assert.deepEqual(list.indexOf(4), [])
  })
  it('Should print a list as an array', () => {
    const list = new LinkedList()
    const empty = new LinkedList()
    list.addToHead(2)
    list.addToHead(1)
    list.addToHead(4)
    list.addToHead(3)
    console.log('priiint:', list.tail)
    console.log('sorted list:', list.printList())
    assert.deepEqual(list.printList(), [2, 1, 4, 3])
    assert.deepEqual(empty.printList(), null)
  })
  it('Should sort a array of nodes', () => {
    const list = new LinkedList()
    list.addToHead(2)
    list.addToHead(1)
    list.addToHead(4)
    list.addToHead(3)
    console.log('sorted list:', list.bubbleSort(list.tail))
    assert.deepEqual(list.bubbleSort(list.tail), [0, 4])
  })
})
